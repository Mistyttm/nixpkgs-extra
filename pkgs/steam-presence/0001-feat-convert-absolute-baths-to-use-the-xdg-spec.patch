From 6ee1422a101b83cb01123b6832ba09995b0eefc1 Mon Sep 17 00:00:00 2001
From: Mistyttm <contact@mistyttm.dev>
Date: Wed, 27 Aug 2025 17:10:34 +1000
Subject: [PATCH] feat: convert absolute baths to use the xdg spec

---
 main.py | 77 ++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 44 insertions(+), 33 deletions(-)

diff --git a/main.py b/main.py
index a5ec1d0..147769b 100644
--- a/main.py
+++ b/main.py
@@ -8,20 +8,31 @@ from datetime import datetime
 import json
 from os.path import exists, dirname, abspath
 
 # for restarting the script on a failed run
 import sys 
 import os
 
 # for general programing
 import copy
 
+# for enabling the use of XDG Base Directory Specification
+from pathlib import Path
+APP_NAME = "steam-presence"
+xdg_config_home = os.environ.get("XDG_CONFIG_HOME", Path.home() / ".config")
+config_dir = Path(xdg_config_home) / APP_NAME
+config_dir.mkdir(parents=True, exist_ok=True)
+data_dir = config_dir / "data"
+
+config_file = config_dir / "config.json"
+meta_file = config_dir / "meta.json"
+
 try:
     # requesting data from steam's API
     import requests
 
     # creating rich presences for discord
     from pypresence import Presence
 
     # used to get the game's cover art
     from steamgrid import SteamGridDB
     
@@ -67,47 +78,47 @@ def makeWebRequest(URL, loops=0):
         if loops > 10:
             error(f"falling back... the script got caught in a loop while fetching data from `{URL}`")
             return "error"
         elif "104 'Connection reset by peer'" in str(e):
             return makeWebRequest(URL, loops+1)
         else:
             # error(f"falling back... exception met whilst trying to fetch data from `{URL}`\nfull error: {e}")
             return "error"
 
 def getMetaFile():
-    if exists(f"{dirname(__file__)}/data/meta.json"):
-        with open(f"{dirname(__file__)}/data/meta.json", "r") as f:
+    if exists(f"{data_dir}/meta.json"):
+        with open(f"{data_dir}/meta.json", "r") as f:
             metaFile = json.load(f)
     
-    elif exists(f"{dirname(__file__)}/meta.json"):
-        with open(f"{dirname(__file__)}/meta.json", "r") as f:
+    elif exists(meta_file):
+        with open(meta_file, "r") as f:
             metaFile = json.load(f)
     
     else:
         # remove in 1.12? maybe 1.13 - whenever i do anything else with the meta file - just make this throw an error instead
         log("couldn't find the the meta file, creating new one")
-        with open(f"{dirname(__file__)}/meta.json", "w") as f:
+        with open(meta_file, "w") as f:
             metaFile = json.dump({"structure-version": "0"}, f)
         
         return getMetaFile()
         
     return metaFile
 
 def writeToMetaFile(keys: list, value):
     metaFile = getMetaFile()
     
     for i in range(len(keys) - 1):
         metaFile = metaFile[keys[i]]
     
     metaFile[keys[-1]] = value
     
-    with open(f"{dirname(__file__)}/data/meta.json", "w") as f:
+    with open(f"{data_dir}/meta.json", "w") as f:
         json.dump(metaFile, f)
     
     
     
 # opens the config file and loads the data
 def getConfigFile():
     # the default settings, don't use exampleConfig.json as people might change that
     defaultSettings = {
         "STEAM_API_KEY": "STEAM_API_KEY",
         "USER_IDS": "USER_ID",
@@ -152,26 +163,26 @@ def getConfigFile():
   
         "BLACKLIST" : [
             "game1",
             "game2",
             "game3"
         ],
 
         "WHITELIST" : []
     }
 
-    if exists(f"{dirname(abspath(__file__))}/config.json"):
-        with open(f"{dirname(abspath(__file__))}/config.json", "r") as f:
+    if exists(config_file):
+        with open(config_file, "r") as f:
             userSettings = json.load(f)
     
-    elif exists(f"{dirname(abspath(__file__))}/exampleconfig.json"):
-        with open(f"{dirname(abspath(__file__))}/exampleconfig.json", "r") as f:
+    elif exists(f"{config_dir}/exampleconfig.json"):
+        with open(f"{config_dir}/exampleconfig.json", "r") as f:
             userSettings = json.load(f)
     
     else:
         error("Config file not found. Please read the readme and create a config file.")
         exit()
     
         
     # if something isn't speficied in the user's config file, fill it in with data from the default settings 
     settings = {**defaultSettings, **userSettings}
     for key, value in defaultSettings.items():
@@ -227,21 +238,21 @@ def getImageFromSGDB(loops=0):
             entry = gridIconsDict[i][1]
             # makes sure image is not NSFW
             if entry[1] == False:
                 # makes sure it's not an .ico file - discord cannot display these
                 if entry[3] == "image/png":
                     # sets the link, and gives credit to the artist if anyone hovers over the icon
                     coverImage = entry[2]
                     coverImageText = f"Art by {entry[4]} on SteamGrid DB"
                     log("successfully retrived icon from SGDB")
                     # saves this data to disk
-                    with open(f'{dirname(abspath(__file__))}/data/icons.txt', 'a') as icons:
+                    with open(f'{data_dir}/icons.txt', 'a') as icons:
                         icons.write(f"{gameName.lower()}={coverImage}||{coverImageText}\n")
                         icons.close()
                     return
         
         log("failed, trying to load from the website directly")
         # if the game doesn't have any .png files for the game, try to web scrape them from the site
         for i in range(0, len(gridIconsDict)):
             entry = gridIconsDict[i][1]
             # makes sure image is not NSFW
             if entry[1] == False:
@@ -258,21 +269,21 @@ def getImageFromSGDB(loops=0):
                 soup = BeautifulSoup(page.content, "html.parser")
 
                 img = soup.find("meta", property="og:image")
                 
                 coverImage = img["content"]
                 coverImageText = f"Art by {entry[4]} on SteamGrid DB"
 
                 log("successfully retrived icon from SGDB")
 
                 # saves data to disk
-                with open(f'{dirname(abspath(__file__))}/data/icons.txt', 'a') as icons:
+                with open(f'{data_dir}/icons.txt', 'a') as icons:
                     icons.write(f"{gameName.lower()}={coverImage}||{coverImageText}\n")
                     icons.close()
                 return
         
         log("failed to fetch icon from SGDB")
     
     else:
         log(f"SGDB doesn't seem to have any entries for {gameName}")
 
 def getGameSteamID():
@@ -405,21 +416,21 @@ def getGameReviews():
 # searches the steam grid DB or the official steam store to get cover images for games
 def getGameImage():
     global coverImage
     global coverImageText
     
     coverImage = ""
     
     log(f"fetching icon for {gameName}")
     
     # checks if there's already an existing icon saved to disk for the game 
-    with open(f'{dirname(abspath(__file__))}/data/icons.txt', 'r') as icons:
+    with open(f'{data_dir}/icons.txt', 'r') as icons:
         for i in icons:
             # cut off the new line character
             game = i.split("\n")
             game = game[0].split("=")
             if gameName.lower() == game[0]:
                 coverData = game[1].split("||")
                 coverImage = coverData[0]
                 
                 # if the script doesn't find text saved for the image, it won't set any  
                 if len(coverData) >= 2:
@@ -458,25 +469,25 @@ def getGamePrice():
     respone = r.json()
     
     if "price_overview" not in respone[str(gameSteamID)]["data"]:
         return
     
     return respone[str(gameSteamID)]["data"]["price_overview"]["final_formatted"]
         
         
 # web scrapes the user's web page, sending the needed cookies along with the request
 def getWebScrapePresence():
-    if not exists(f"{dirname(abspath(__file__))}/cookies.txt"):
+    if not exists(f"{config_dir}/cookies.txt"):
         print("cookie.txt not found, this is because `WEB_SCRAPE` is enabled in the config")
         return
     
-    cj = cookielib.MozillaCookieJar(f"{dirname(abspath(__file__))}/cookies.txt")
+    cj = cookielib.MozillaCookieJar(f"{config_dir}/cookies.txt")
     cj.load()
     
     # split on ',' in case of multiple userIDs
     for i in userID.split(","):
         URL = f"https://steamcommunity.com/profiles/{i}/"
         
         # sleep for 0.2 seconds, this is done after every steam request, to avoid getting perma banned (yes steam is scuffed)
         sleep(0.2)
         
         try:
@@ -634,22 +645,22 @@ def getGameDiscordID(loops=0):
         else:
             getGameDiscordID(loops + 1)
             return
     
     else:
         response = r.json()
     
     ignoredChars = "®©™℠"
     
     # check if the "customGameIDs.json" file exists, if so, open it
-    if exists(f"{dirname(abspath(__file__))}/data/customGameIDs.json"):
-        with open(f"{dirname(abspath(__file__))}/data/customGameIDs.json", "r") as f:
+    if exists(f"{data_dir}/customGameIDs.json"):
+        with open(f"{data_dir}/customGameIDs.json", "r") as f:
             # load the values of the file
             gameIDsFile = json.load(f)
 
             log(f"loaded {len(gameIDsFile)} custom discord game IDs from disk")
             
             # add the values from the file directly to the list returned by discord
             for i in gameIDsFile:
                 response.append({
                     "name": i,
                     "id": gameIDsFile[i]
@@ -755,22 +766,22 @@ def getLocalPresence():
     # don't continue if it didn't find a game
     if not gameFound:
         return
     
     global gameName
     global startTime
     global isPlayingLocalGame
     global isPlayingSteamGame
     
     
-    if exists(f"{dirname(abspath(__file__))}/data/games.txt"):
-        with open(f'{dirname(abspath(__file__))}/data/games.txt', 'r+') as gamesFile:
+    if exists(f"{data_dir}/games.txt"):
+        with open(f'{data_dir}/games.txt', 'r+') as gamesFile:
             for i in gamesFile:
                 # remove the new line
                 game = i.split("\n")
                 # split first and second part of the string
                 game = game[0].split("=")
                 
                 # if there's a match
                 if game[0].lower() == processName.lower():
                     gameName = game[1]
                     startTime = processCreationTime
@@ -784,21 +795,21 @@ def getLocalPresence():
                     return
             
             # if there wasn't a local entry for the game
             log(f"could not find a name for {processName}, adding an entry to games.txt")
             gamesFile.write(f"{processName}={processName.title()}\n")
             gamesFile.close()
             
     # if games.txt doesn't exist at all           
     else:
         log("games.txt does not exist, creating one")
-        with open(f'{dirname(abspath(__file__))}/data/games.txt', 'a') as gamesFile:
+        with open(f'{data_dir}/games.txt', 'a') as gamesFile:
             gamesFile.write(f"{processName}={processName.title()}\n")
             gamesFile.close()
     
     
     isPlayingLocalGame = True
     isPlayingSteamGame = False
     gameName = processName.title()
     startTime = processCreationTime
 
     
@@ -887,45 +898,45 @@ def verifyProjectVersion():
     if metaFile["structure-version"] == "0":
         print("----------------------------------------------------------")
         log("updating meta.json's structure-version to `1`")
         log("importing libraries for meta update")
         try:
             import shutil
         except ImportError:
             error("import error whilst importing `shutil`, exiting")
             exit()
         
-        if not os.path.exists(f"{dirname(__file__)}/data"):
-            log(f"creating {dirname(__file__)}/data/")
-            os.makedirs(f"{dirname(__file__)}/data")
+        if not os.path.exists(data_dir):
+            log(f"creating {data_dir}")
+            os.makedirs(data_dir)
         
         expectedFiles = {
             "icons.txt": "",
             "games.txt": "",
             "customGameIDs.json": "{}"
         }
         
         for i in expectedFiles:
             if not os.path.exists(i):
                 log(f"creating file `{i}` with content `{expectedFiles[i]}`")
-                with open(f"{dirname(__file__)}/{i}", "w") as f:
+                with open(f"{config_dir}/{i}", "w") as f:
                     f.write(expectedFiles[i])  
         
         try:
-            log(f"moving {dirname(__file__)}/icons.txt")
-            shutil.move(f"{dirname(__file__)}/icons.txt",           f"{dirname(__file__)}/data/icons.txt")
-            log(f"moving {dirname(__file__)}/games.txt")
-            shutil.move(f"{dirname(__file__)}/games.txt",           f"{dirname(__file__)}/data/games.txt")
-            log(f"moving {dirname(__file__)}/customGameIDs.json")
-            shutil.move(f"{dirname(__file__)}/customGameIDs.json",  f"{dirname(__file__)}/data/customGameIDs.json")
-            log(f"moving {dirname(__file__)}/meta.json")
-            shutil.move(f"{dirname(__file__)}/meta.json",           f"{dirname(__file__)}/data/meta.json")
+            log(f"moving {config_dir}/icons.txt")
+            shutil.move(f"{config_dir}/icons.txt",           f"{data_dir}/icons.txt")
+            log(f"moving {config_dir}/games.txt")
+            shutil.move(f"{config_dir}/games.txt",           f"{data_dir}/games.txt")
+            log(f"moving {config_dir}/customGameIDs.json")
+            shutil.move(f"{config_dir}/customGameIDs.json",  f"{data_dir}/customGameIDs.json")
+            log(f"moving {config_dir}/meta.json")
+            shutil.move(f"{config_dir}/meta.json",           f"{data_dir}/meta.json")
             
             writeToMetaFile(["structure-version"], "1")
         except Exception as e:
             error(f"error encountered whilst trying to update the config-version to version 1, exiting\nError encountered: {e}")
             exit()
         print("----------------------------------------------------------")
     elif metaFile["structure-version"] == "1":
         print("----------------------------------------------------------")
         log("progam's current folder structure version is up to date...")
         print("----------------------------------------------------------")
@@ -976,21 +987,21 @@ def checkForUpdate():
                 print("----------------------------------------------------------")
             return
         # if the current version is newer than the "newest one", just return to make sure it doesn't falsly report anything
         # this shouldn't ever come up for most people - but it's probably a good idea to include this if statement; just in case 
         if int(old) > int(new):
             return
 
 def main():
     global currentVersion
     # this always has to match the newest release tag
-    currentVersion = "v1.12.1"
+    currentVersion = "v1.12.2"
     
     # check if there's any updates for the program
     checkForUpdate()
     # does various things, such as verifying that certain files are in certain locations
     # well it does 1 thing at the time of writing, but i'll probably forget to update this comment when i add more lol 
     verifyProjectVersion()
     
     global userID
     global steamAPIKey
     global localGames
-- 
2.50.1

